/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TreatmentService } from "../treatment.service";
import { TreatmentCreateInput } from "./TreatmentCreateInput";
import { Treatment } from "./Treatment";
import { TreatmentFindManyArgs } from "./TreatmentFindManyArgs";
import { TreatmentWhereUniqueInput } from "./TreatmentWhereUniqueInput";
import { TreatmentUpdateInput } from "./TreatmentUpdateInput";

export class TreatmentControllerBase {
  constructor(protected readonly service: TreatmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Treatment })
  async createTreatment(
    @common.Body() data: TreatmentCreateInput
  ): Promise<Treatment> {
    return await this.service.createTreatment({
      data: {
        ...data,

        appointment: data.appointment
          ? {
              connect: data.appointment,
            }
          : undefined,
      },
      select: {
        appointment: {
          select: {
            id: true,
          },
        },

        cost: true,
        createdAt: true,
        description: true,
        id: true,
        treatmentName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Treatment] })
  @ApiNestedQuery(TreatmentFindManyArgs)
  async treatments(@common.Req() request: Request): Promise<Treatment[]> {
    const args = plainToClass(TreatmentFindManyArgs, request.query);
    return this.service.treatments({
      ...args,
      select: {
        appointment: {
          select: {
            id: true,
          },
        },

        cost: true,
        createdAt: true,
        description: true,
        id: true,
        treatmentName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Treatment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async treatment(
    @common.Param() params: TreatmentWhereUniqueInput
  ): Promise<Treatment | null> {
    const result = await this.service.treatment({
      where: params,
      select: {
        appointment: {
          select: {
            id: true,
          },
        },

        cost: true,
        createdAt: true,
        description: true,
        id: true,
        treatmentName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Treatment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTreatment(
    @common.Param() params: TreatmentWhereUniqueInput,
    @common.Body() data: TreatmentUpdateInput
  ): Promise<Treatment | null> {
    try {
      return await this.service.updateTreatment({
        where: params,
        data: {
          ...data,

          appointment: data.appointment
            ? {
                connect: data.appointment,
              }
            : undefined,
        },
        select: {
          appointment: {
            select: {
              id: true,
            },
          },

          cost: true,
          createdAt: true,
          description: true,
          id: true,
          treatmentName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Treatment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTreatment(
    @common.Param() params: TreatmentWhereUniqueInput
  ): Promise<Treatment | null> {
    try {
      return await this.service.deleteTreatment({
        where: params,
        select: {
          appointment: {
            select: {
              id: true,
            },
          },

          cost: true,
          createdAt: true,
          description: true,
          id: true,
          treatmentName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
