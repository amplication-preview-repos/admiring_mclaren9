/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Treatment } from "./Treatment";
import { TreatmentCountArgs } from "./TreatmentCountArgs";
import { TreatmentFindManyArgs } from "./TreatmentFindManyArgs";
import { TreatmentFindUniqueArgs } from "./TreatmentFindUniqueArgs";
import { CreateTreatmentArgs } from "./CreateTreatmentArgs";
import { UpdateTreatmentArgs } from "./UpdateTreatmentArgs";
import { DeleteTreatmentArgs } from "./DeleteTreatmentArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { TreatmentService } from "../treatment.service";
@graphql.Resolver(() => Treatment)
export class TreatmentResolverBase {
  constructor(protected readonly service: TreatmentService) {}

  async _treatmentsMeta(
    @graphql.Args() args: TreatmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Treatment])
  async treatments(
    @graphql.Args() args: TreatmentFindManyArgs
  ): Promise<Treatment[]> {
    return this.service.treatments(args);
  }

  @graphql.Query(() => Treatment, { nullable: true })
  async treatment(
    @graphql.Args() args: TreatmentFindUniqueArgs
  ): Promise<Treatment | null> {
    const result = await this.service.treatment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Treatment)
  async createTreatment(
    @graphql.Args() args: CreateTreatmentArgs
  ): Promise<Treatment> {
    return await this.service.createTreatment({
      ...args,
      data: {
        ...args.data,

        appointment: args.data.appointment
          ? {
              connect: args.data.appointment,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Treatment)
  async updateTreatment(
    @graphql.Args() args: UpdateTreatmentArgs
  ): Promise<Treatment | null> {
    try {
      return await this.service.updateTreatment({
        ...args,
        data: {
          ...args.data,

          appointment: args.data.appointment
            ? {
                connect: args.data.appointment,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Treatment)
  async deleteTreatment(
    @graphql.Args() args: DeleteTreatmentArgs
  ): Promise<Treatment | null> {
    try {
      return await this.service.deleteTreatment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Appointment, {
    nullable: true,
    name: "appointment",
  })
  async getAppointment(
    @graphql.Parent() parent: Treatment
  ): Promise<Appointment | null> {
    const result = await this.service.getAppointment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
